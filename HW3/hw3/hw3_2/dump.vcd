$date
	Sun Feb 28 15:06:42 2016
$end
$version
	ModelSim Version 5.8b
$end
$timescale
	1ns
$end
$scope module sc_bench $end
$var reg 1 ! ctr_rst $end
$var wire 1 " out [2] $end
$var wire 1 # out [1] $end
$var wire 1 $ out [0] $end
$var wire 1 % err $end
$var wire 1 & clk $end
$var wire 1 ' rst $end
$var reg 4 ( random_gen [3:0] $end
$var reg 3 ) expected_out [2:0] $end
$var reg 1 * fail $end
$scope module DUT $end
$var wire 1 + ctr_rst $end
$var wire 1 " out [2] $end
$var wire 1 # out [1] $end
$var wire 1 $ out [0] $end
$var wire 1 , err $end
$var wire 1 - clk $end
$var wire 1 . rst $end
$scope module clk_generator $end
$var reg 1 / clk $end
$var reg 1 0 rst $end
$var wire 1 , err $end
$var integer 32 1 cycle_count $end
$upscope $end
$scope module sc0 $end
$var wire 1 - clk $end
$var wire 1 . rst $end
$var wire 1 + ctr_rst $end
$var wire 1 " out [2] $end
$var wire 1 # out [1] $end
$var wire 1 $ out [0] $end
$var reg 1 2 err $end
$var wire 1 3 state [2] $end
$var wire 1 4 state [1] $end
$var wire 1 5 state [0] $end
$var reg 3 6 next_state [2:0] $end
$scope module flop[2] $end
$var wire 1 3 q $end
$var wire 1 7 d $end
$var wire 1 - clk $end
$var wire 1 . rst $end
$var reg 1 8 state $end
$upscope $end
$scope module flop[1] $end
$var wire 1 4 q $end
$var wire 1 9 d $end
$var wire 1 - clk $end
$var wire 1 . rst $end
$var reg 1 : state $end
$upscope $end
$scope module flop[0] $end
$var wire 1 5 q $end
$var wire 1 ; d $end
$var wire 1 - clk $end
$var wire 1 . rst $end
$var reg 1 < state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module sc_bench $end
$var wire 1 " out [2] $end
$var wire 1 # out [1] $end
$var wire 1 $ out [0] $end
$var wire 1 % err $end
$var wire 1 & clk $end
$var wire 1 ' rst $end
$scope module DUT $end
$var wire 1 + ctr_rst $end
$var wire 1 " out [2] $end
$var wire 1 # out [1] $end
$var wire 1 $ out [0] $end
$var wire 1 , err $end
$var wire 1 - clk $end
$var wire 1 . rst $end
$scope module clk_generator $end
$var wire 1 , err $end
$upscope $end
$scope module sc0 $end
$var wire 1 - clk $end
$var wire 1 . rst $end
$var wire 1 + ctr_rst $end
$var wire 1 " out [2] $end
$var wire 1 # out [1] $end
$var wire 1 $ out [0] $end
$var wire 1 3 state [2] $end
$var wire 1 4 state [1] $end
$var wire 1 5 state [0] $end
$scope module flop[2] $end
$var wire 1 3 q $end
$var wire 1 7 d $end
$var wire 1 - clk $end
$var wire 1 . rst $end
$upscope $end
$scope module flop[1] $end
$var wire 1 4 q $end
$var wire 1 9 d $end
$var wire 1 - clk $end
$var wire 1 . rst $end
$upscope $end
$scope module flop[0] $end
$var wire 1 5 q $end
$var wire 1 ; d $end
$var wire 1 - clk $end
$var wire 1 . rst $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
b0 (
b0 )
0*
02
b1 6
0<
0:
08
1/
10
b1 1
x$
x#
x"
z%
1&
1'
0,
1-
1.
x5
x4
x3
0+
1;
09
07
$end
#1
03
04
05
0$
0#
0"
#50
0/
0-
0&
#100
1/
b10 1
1-
1&
b1111 (
#150
0/
0-
0&
#200
1/
b11 1
1-
1&
#201
00
0.
0'
#250
0/
0-
0&
#300
1/
b100 1
1-
1&
1<
b1 )
#301
15
b10 6
1$
0;
19
#350
0/
0-
0&
#400
1/
b101 1
1-
1&
b1 (
1!
0<
1:
1+
b0 6
09
b10 )
#401
14
05
0$
1#
#450
0/
0-
0&
#500
1/
b110 1
1-
1&
0:
b0 )
#501
04
0#
#550
0/
0-
0&
#600
1/
b111 1
1-
1&
b1111 (
0!
0+
b1 6
1;
#650
0/
0-
0&
#700
1/
b1000 1
1-
1&
b0 (
1<
b1 )
#701
15
b10 6
1$
0;
19
#750
0/
0-
0&
#800
1/
b1001 1
1-
1&
b1 (
1!
0<
1:
1+
b0 6
09
b10 )
#801
14
05
0$
1#
#850
0/
0-
0&
#900
1/
b1010 1
1-
1&
0:
b0 )
#901
04
0#
#950
0/
0-
0&
#1000
1/
b1011 1
1-
1&
b0 (
0!
0+
b1 6
1;
#1050
0/
0-
0&
#1100
1/
b1100 1
1-
1&
b1 (
1!
1<
1+
b0 6
0;
b1 )
#1101
15
1$
#1150
0/
0-
0&
#1200
1/
b1101 1
1-
1&
0<
b0 )
#1201
05
0$
#1250
0/
0-
0&
#1300
1/
b1110 1
1-
1&
b0 (
0!
0+
b1 6
1;
#1350
0/
0-
0&
#1400
1/
b1111 1
1-
1&
b1 (
1!
1<
1+
b0 6
0;
b1 )
#1401
15
1$
#1450
0/
0-
0&
#1500
1/
b10000 1
1-
1&
b0 (
0!
0<
0+
b10 6
19
b0 )
#1501
05
b1 6
0$
1;
09
#1550
0/
0-
0&
#1600
1/
b10001 1
1-
1&
b1111 (
1<
b1 )
#1601
15
b10 6
1$
0;
19
#1650
0/
0-
0&
#1700
1/
b10010 1
1-
1&
b0 (
0<
1:
b10 )
#1701
14
05
b11 6
0$
1#
1;
#1750
0/
0-
0&
#1800
1/
b10011 1
1-
1&
b1 (
1!
1<
1+
b0 6
0;
09
b11 )
#1801
15
1$
#1850
0/
0-
0&
#1900
1/
b10100 1
1-
1&
b1111 (
0!
0<
0:
0+
b100 6
17
b0 )
#1901
04
05
b1 6
0$
0#
1;
07
#1950
0/
0-
0&
#2000
1/
b10101 1
1-
1&
b0 (
1<
b1 )
#2001
15
b10 6
1$
0;
19
#2050
0/
0-
0&
#2100
1/
b10110 1
1-
1&
b1 (
1!
0<
1:
1+
b0 6
09
b10 )
#2101
14
05
0$
1#
#2150
0/
0-
0&
#2200
1/
b10111 1
1-
1&
b0 (
0!
0:
0+
b11 6
1;
19
b0 )
#2201
04
b1 6
0#
09
#2250
0/
0-
0&
#2300
1/
b11000 1
1-
1&
1<
b1 )
#2301
15
b10 6
1$
0;
19
#2350
0/
0-
0&
#2400
1/
b11001 1
1-
1&
0<
1:
b10 )
#2401
14
05
b11 6
0$
1#
1;
#2450
0/
0-
0&
#2500
1/
b11010 1
1-
1&
b1111 (
1<
b11 )
#2501
15
b100 6
1$
0;
09
17
#2550
0/
0-
0&
#2600
1/
b11011 1
1-
1&
b0 (
0<
0:
18
b100 )
#2601
13
04
05
b101 6
0$
0#
1"
1;
#2650
0/
0-
0&
#2700
1/
b11100 1
1-
1&
b1111 (
1<
b101 )
#2701
15
1$
#2750
0/
0-
0&
#2800
1/
b11101 1
1-
1&
#2850
0/
0-
0&
#2900
1/
b11110 1
1-
1&
#2950
0/
0-
0&
#3000
1/
b11111 1
1-
1&
#3050
0/
0-
0&
#3100
1/
b100000 1
1-
1&
b0 (
#3150
0/
0-
0&
#3200
1/
b100001 1
1-
1&
#3250
0/
0-
0&
#3300
1/
b100010 1
1-
1&
#3350
0/
0-
0&
#3400
1/
b100011 1
1-
1&
#3450
0/
0-
0&
#3500
1/
b100100 1
1-
1&
b1111 (
#3550
0/
0-
0&
#3600
1/
b100101 1
1-
1&
b0 (
#3650
0/
0-
0&
#3700
1/
b100110 1
1-
1&
b1111 (
#3750
0/
0-
0&
#3800
1/
b100111 1
1-
1&
#3850
0/
0-
0&
#3900
1/
b101000 1
1-
1&
#3950
0/
0-
0&
#4000
1/
b101001 1
1-
1&
b1 (
1!
1+
b0 6
0;
07
#4050
0/
0-
0&
#4100
1/
b101010 1
1-
1&
b1111 (
0!
0<
08
0+
b101 6
1;
17
b0 )
#4101
03
05
b1 6
0$
0"
07
#4150
0/
0-
0&
#4200
1/
b101011 1
1-
1&
b0 (
1<
b1 )
#4201
15
b10 6
1$
0;
19
#4250
0/
0-
0&
#4300
1/
b101100 1
1-
1&
0<
1:
b10 )
#4301
14
05
b11 6
0$
1#
1;
#4350
0/
0-
0&
#4400
1/
b101101 1
1-
1&
b1 (
1!
1<
1+
b0 6
0;
09
b11 )
#4401
15
1$
#4450
0/
0-
0&
#4500
1/
b101110 1
1-
1&
b1111 (
0!
0<
0:
0+
b100 6
17
b0 )
#4501
04
05
b1 6
0$
0#
1;
07
#4550
0/
0-
0&
#4600
1/
b101111 1
1-
1&
b1 (
1!
1<
1+
b0 6
0;
b1 )
#4601
15
1$
#4650
0/
0-
0&
#4700
1/
b110000 1
1-
1&
b0 (
0!
0<
0+
b10 6
19
b0 )
#4701
05
b1 6
0$
1;
09
#4750
0/
0-
0&
